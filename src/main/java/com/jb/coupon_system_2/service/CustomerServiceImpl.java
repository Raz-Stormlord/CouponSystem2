package com.jb.coupon_system_2.service;import com.jb.coupon_system_2.controller.ControllerAdvice;import com.jb.coupon_system_2.data.dto.CouponDto;import com.jb.coupon_system_2.data.dto.CustomerDto;import com.jb.coupon_system_2.data.dto.Login;import com.jb.coupon_system_2.data.entity.Coupon;import com.jb.coupon_system_2.data.entity.Customer;import com.jb.coupon_system_2.mapper.CouponMapper;import com.jb.coupon_system_2.mapper.CustomerMapper;import com.jb.coupon_system_2.repository.CouponRepository;import com.jb.coupon_system_2.repository.CustomerRepository;import com.jb.coupon_system_2.session.ClientSession;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.time.LocalDate;import java.util.List;import java.util.Optional;import java.util.UUID;import java.util.stream.Collectors;import lombok.RequiredArgsConstructor;@Service@RequiredArgsConstructorpublic class CustomerServiceImpl implements CustomerService {    @Autowired    private CustomerRepository customerRepository;    @Autowired    private  CouponRepository couponRepository;    @Autowired    private  CouponMapper couponMapper;    @Autowired    private CustomerMapper customerMapper;    @Override    public List<CouponDto> findAllCouponsPurchasedByCustomerId(UUID customerId) {        List<Coupon> purchasedCoupons = customerRepository.findAllCouponsPurchasedByCustomerId(customerId);        return purchasedCoupons.stream()                .map(couponMapper::toDto)                .collect(Collectors.toList());    }    @Override    public List<CouponDto> findAllCouponsUnpurchasedByCustomerId(UUID customerId) {        List<Coupon> unpurchasedCoupons = customerRepository.findAllCouponsUnpurchasedByCustomerId(customerId);        return unpurchasedCoupons.stream()                .map(couponMapper::toDto)                .collect(Collectors.toList());    }    @Override    public List<CouponDto> findPurchasedCouponsExpiringInDays(UUID customerId) {        Optional<Customer> customerOptional = customerRepository.findById(customerId);        if(!customerOptional.isPresent()){        }        Customer customer = customerOptional.get();        LocalDate today = LocalDate.now();        List<CouponDto> expiringCoupons = customer.getPurchasedCoupons()                .stream().filter(c -> c.getExpirationDate().toEpochDay() <= today.toEpochDay() +7 )                .map(couponMapper::toDto)                .collect(Collectors.toList());        return expiringCoupons;    }    @Override    public CouponDto purchaseCoupon(UUID customerId, UUID couponId) {        Customer customer = customerRepository.findById(customerId)                .orElseThrow(() -> new ControllerAdvice.NoSuchCustomerException(                        String.format("Error 404 - no match found for %s: ", customerId.toString())));        Coupon coupon = couponRepository.findById(couponId)                .orElseThrow(() -> new ControllerAdvice.NoSuchCouponException(String.format("Error 404 - no match found for %s: ", couponId.toString())));        customer.getPurchasedCoupons().add(coupon);        customerRepository.save(customer);        return couponMapper.toDto(coupon);    }    @Override    public String login(Login login) {        CustomerDto c= customerRepository.findCustomerByEmailAndPassword(login.getUsername(), login.getPassword())                .map(customerMapper::toDto)                .orElseThrow(() -> new ControllerAdvice.NoSuchCustomerException(String.format(                        "Error 400 - no match found for %s",                        login.getUsername())));        String token = System.currentTimeMillis()+"";        ClientSession clientSession = ClientSession.createSession(token, c.getId(), ClientSession.ClientType.Customer);        return token;    }    @Override    public String signup(Login login) {        Optional<Customer> optional= customerRepository.findCustomerByEmailAndPassword(login.getUsername(), login.getPassword());        if(optional.isPresent()){            //ToDO throw username taken . already exist        }        Customer customer = new Customer();        customer.setEmail(login.getUsername());        customer.setPassword(login.getPassword());        customer.setFirstName("");  // signup does not have name        customer.setLastName("");        customer = customerRepository.save(customer);        String token = System.currentTimeMillis()+"";        ClientSession clientSession = ClientSession.createSession(token, customer.getCustomerId(), ClientSession.ClientType.Customer);        return token;    }    @Override    public CustomerDto getDetails(UUID customerId) {        Optional<Customer> details = customerRepository.findById(customerId);        Optional<CustomerDto> dto = details.map(customerMapper::toDto);        return dto.get() ;    }}