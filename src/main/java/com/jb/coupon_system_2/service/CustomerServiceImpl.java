package com.jb.coupon_system_2.service;import com.jb.coupon_system_2.controller.ControllerAdvice;import com.jb.coupon_system_2.data.dto.CouponDto;import com.jb.coupon_system_2.data.dto.CustomerDto;import com.jb.coupon_system_2.data.dto.Login;import com.jb.coupon_system_2.data.entity.Coupon;import com.jb.coupon_system_2.data.entity.Customer;import com.jb.coupon_system_2.mapper.CouponMapper;import com.jb.coupon_system_2.mapper.CustomerMapper;import com.jb.coupon_system_2.repository.CouponRepository;import com.jb.coupon_system_2.repository.CustomerRepository;import com.jb.coupon_system_2.session.ClientSession;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;import java.util.Scanner;import java.util.UUID;import java.util.stream.Collectors;import lombok.RequiredArgsConstructor;@Service@RequiredArgsConstructorpublic class CustomerServiceImpl implements CustomerService {    @Autowired    private CustomerRepository customerRepository;    @Autowired    private  CouponRepository couponRepository;    @Autowired    private  CouponMapper couponMapper;    @Autowired    private CustomerMapper customerMapper;    @Override    public List<CouponDto> findAllCouponsPurchasedByCustomerId(UUID id) {        List<Coupon> purchasedCoupons = customerRepository.findAllCouponsPurchasedByCustomerId(id);        return purchasedCoupons.stream()                .map(couponMapper::toDto)                .collect(Collectors.toList());    }    @Override    public List<CouponDto> findAllCouponsUnpurchasedByCustomerId(UUID id) {        List<Coupon> unpurchasedCoupons = customerRepository.findAllCouponsUnpurchasedByCustomerId(                id);        return unpurchasedCoupons.stream()                .map(couponMapper::toDto)                .collect(Collectors.toList());    }    @Override    public List<CouponDto> findPurchasedCouponsExpiringInDays(UUID id) {        Scanner scanner = new Scanner(System.in);        System.out.print("Enter the number of days until the coupon expires: ");        int daysUntilExpiration = scanner.nextInt();        List<Coupon> expiringCoupons = customerRepository.findPurchasedCouponsExpiringInDays(id,                                                                                             daysUntilExpiration);        return expiringCoupons.stream()                .map(couponMapper::toDto)                .collect(Collectors.toList());    }    @Override    public CouponDto purchaseCoupon(UUID id) {        Customer customer = customerRepository.findById(id)                .orElseThrow(() -> new ControllerAdvice.NoSuchCustomerException(                        "Error 404 - no match found for %s: ", id));        Coupon coupon = couponRepository.findById(id)                .orElseThrow(() -> new ControllerAdvice.NoSuchCouponException(                        "Error 404 - no match found for %s: ", id));        customer.getPurchasedCoupons().add(coupon);        customerRepository.save(customer);        return couponMapper.toDto(coupon);    }    @Override    public String login(Login login) {        CustomerDto c= customerRepository.findCustomer(login.getUsername(), login.getPassword())                .map(customerMapper::toDto)                .orElseThrow(() -> new ControllerAdvice.NoSuchCustomerException(String.format(                        "Error 400 - no match found for %s",                        login.getUsername())));        String token = System.currentTimeMillis()+"";        ClientSession clientSession = ClientSession.createSession(token, c.getId(), ClientSession.ClientType.Customer);        return token;    }}