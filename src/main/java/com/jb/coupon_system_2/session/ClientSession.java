package com.jb.coupon_system_2.session;import org.springframework.beans.factory.annotation.Value;import java.util.Map;import java.util.UUID;import java.util.concurrent.ConcurrentHashMap;import lombok.Getter;public class ClientSession {    private static final Map<String, ClientSession> sessions = new ConcurrentHashMap<>();    public static ClientSession createSession(String token, UUID userId, ClientType kind) {        ClientSession session = new ClientSession(userId, kind);        sessions.put(token, session);        return session;    }    public static ClientSession getSession(String token) {        return sessions.get(token);    }    public static void invalidateSession(String token) {        sessions.remove(token);    }    public enum ClientType{        Comapny, Customer;    }    @Getter    private UUID userId;    private ClientType kind;    private long lastActionTime;    @Value("${allowed.time.milliseconds}")    private static long allowedTime;    public ClientSession(UUID userId, ClientType kind) {        this.userId = userId;        this.kind = kind;        this.lastActionTime = System.currentTimeMillis();    }    public boolean isAuthorizedAccess() {        if(allowedTime == 0){            allowedTime = 3600000;        }        if (System.currentTimeMillis() - lastActionTime > allowedTime) {            System.out.println("Error 401 - Unauthorized access. Avengers will be assembled!");            return false;        }        return true;    }}