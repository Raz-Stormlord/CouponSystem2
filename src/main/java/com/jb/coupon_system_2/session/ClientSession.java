package com.jb.coupon_system_2.session;import org.springframework.scheduling.annotation.Scheduled;import java.util.Iterator;import java.util.Map;import java.util.UUID;import java.util.concurrent.ConcurrentHashMap;import lombok.Getter;public class ClientSession {    private static final int DEFAULT_ALLOWED_TIME = 3600000;    private static final Map<String, ClientSession> sessions = new ConcurrentHashMap<>();    public static ClientSession createSession(String token, UUID userId, ClientType kind) {        ClientSession session = new ClientSession(userId, kind);        sessions.put(token, session);        return session;    }    public static ClientSession getSession(String token) {        return sessions.get(token);    }    public static void invalidateSession(String token) {        sessions.remove(token);    }    public enum ClientType {        Comapny,        Customer;    }    @Getter    private UUID userId;    private ClientType kind;    private long lastActionTime;    private static long allowedTime = DEFAULT_ALLOWED_TIME;    public ClientSession(UUID userId, ClientType kind) {        this.userId = userId;        this.kind = kind;        this.lastActionTime = System.currentTimeMillis();    }    public boolean isAuthorizedAccess() {        return System.currentTimeMillis() - lastActionTime > allowedTime;    }    @Scheduled(fixedDelay = 1000)    public static void cleanupExpiredSessions() {        long currentTime = System.currentTimeMillis();        Iterator<Map.Entry<String, ClientSession>> iterator = sessions.entrySet().iterator();        while (iterator.hasNext()) {            Map.Entry<String, ClientSession> entry = iterator.next();            ClientSession session = entry.getValue();            if (currentTime - session.getLastActionTime() > session.getAllowedTime()) {                iterator.remove();            }        }    }    public long getLastActionTime() {        return lastActionTime;    }    public long getAllowedTime() {        return allowedTime;    }}