package com.jb.coupon_system_2.controller;import com.jb.coupon_system_2.data.dto.CouponDto;import com.jb.coupon_system_2.data.dto.Login;import com.jb.coupon_system_2.data.entity.Coupon;import com.jb.coupon_system_2.service.CustomerService;import com.jb.coupon_system_2.session.ClientSession;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestHeader;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.List;import java.util.UUID;@RestController@RequestMapping("/api/customer")public class CustomerController {    private final CustomerService customerService;    @Autowired    public CustomerController(CustomerService customerService) {        this.customerService = customerService;    }    @GetMapping("localhost:8080/api/customers/all/purchased/{token}")    public ResponseEntity<List<Coupon>> findBoughtCoupons(            @RequestHeader(HttpHeaders.AUTHORIZATION) String token,            @PathVariable UUID customerId) {        ClientSession session = ClientSession.getSession(token);        if(session==null || !session.isAuthorizedAccess()) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();        }        List<Coupon> boughtCoupons = customerService.findAllCouponsPurchasedByCustomerId(customerId);        return ResponseEntity.ok(boughtCoupons);    }    @GetMapping("localhost:8080/api/customers/all/not-purchased/{token}")    public ResponseEntity<List<Coupon>> findNotBoughtCoupons(            @RequestHeader(HttpHeaders.AUTHORIZATION) String token,            @PathVariable UUID customerId) {        ClientSession session = ClientSession.getSession(token);        if(session==null || !session.isAuthorizedAccess()) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();        }        List<Coupon> notBoughtCoupons = customerService.findAllCouponsUnpurchasedByCustomerId(customerId);        return ResponseEntity.ok(notBoughtCoupons);    }    @PostMapping("/buyCoupon/{customerId}/{couponId}")    public ResponseEntity<CouponDto> buyCoupon(            @RequestHeader(HttpHeaders.AUTHORIZATION) String token,            @PathVariable UUID customerId,            @PathVariable UUID couponId) {        ClientSession session = ClientSession.getSession(token);        if(session==null || !session.isAuthorizedAccess()) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();        }        CouponDto boughtCoupon = customerService.purchaseCoupon(customerId,couponId);        return ResponseEntity.status(HttpStatus.CREATED).body(boughtCoupon);    }    @GetMapping("localhost:8080/api/customers/in-a-week/{token}")    public ResponseEntity<List<Coupon>> findExpiringCoupons(            @RequestHeader(HttpHeaders.AUTHORIZATION) String token,            @PathVariable UUID customerId) {        ClientSession session = ClientSession.getSession(token);        if(session==null || !session.isAuthorizedAccess()) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();        }        List<Coupon> expiringCoupons = customerService.findPurchasedCouponsExpiringInDays(customerId);        return ResponseEntity.ok(expiringCoupons);    }    @PostMapping("/login")    public ResponseEntity<String> login(            @RequestBody Login login) {        String token = customerService.login(login);        return ResponseEntity.status(HttpStatus.CREATED).body(token);    }}