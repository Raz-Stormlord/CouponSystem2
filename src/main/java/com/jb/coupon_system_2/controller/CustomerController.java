package com.jb.coupon_system_2.controller;import com.jb.coupon_system_2.data.dto.CouponDto;import com.jb.coupon_system_2.data.dto.CustomerDto;import com.jb.coupon_system_2.data.dto.Login;import com.jb.coupon_system_2.service.CustomerService;import com.jb.coupon_system_2.session.ClientSession;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.CrossOrigin;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.PutMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestHeader;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.List;import java.util.UUID;@RestController@RequestMapping("/api/customer")@CrossOrigin(origins = "*", allowedHeaders = "*")public class CustomerController {    private final CustomerService customerService;    @Autowired    public CustomerController(CustomerService customerService) {        this.customerService = customerService;    }    @GetMapping("all/purchased/{token}")    public ResponseEntity<List<CouponDto>> findBoughtCoupons(            @PathVariable String token) {        ClientSession session = ClientSession.getSession(token);        if(session==null || session.isAuthorizedAccess()) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();        }        List<CouponDto> boughtCoupons = customerService.findAllCouponsPurchasedByCustomerId(session.getUserId());        return ResponseEntity.ok(boughtCoupons);    }    @GetMapping("all/not-purchased/{token}")    public ResponseEntity<List<CouponDto>> findNotBoughtCoupons(            @PathVariable String token) {        ClientSession session = ClientSession.getSession(token);        if(session==null || session.isAuthorizedAccess()) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();        }        List<CouponDto> notBoughtCoupons = customerService.findAllCouponsUnpurchasedByCustomerId(session.getUserId());        return ResponseEntity.ok(notBoughtCoupons);    }    @GetMapping("/buyCoupon/{couponId}/{token}")    public ResponseEntity<CouponDto> buyCoupon(            @PathVariable String token,            @PathVariable UUID couponId) {        ClientSession session = ClientSession.getSession(token);        if(session==null || session.isAuthorizedAccess()) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();        }        CouponDto boughtCoupon = customerService.purchaseCoupon(session.getUserId(), couponId);        return ResponseEntity.status(HttpStatus.NO_CONTENT).body(boughtCoupon);    }    @GetMapping("/in-a-week/{customerId}/{token}")    public ResponseEntity<List<CouponDto>> findExpiringCoupons(            @RequestHeader(HttpHeaders.AUTHORIZATION) String token,            @PathVariable UUID customerId) {        ClientSession session = ClientSession.getSession(token);        if(session==null || session.isAuthorizedAccess()) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();        }        List<CouponDto> expiringCoupons = customerService.findPurchasedCouponsExpiringInDays(customerId);        return ResponseEntity.ok(expiringCoupons);    }    @PostMapping("/login")    public ResponseEntity<String> login(            @RequestBody Login login) {        String token = customerService.login(login);        return ResponseEntity.status(HttpStatus.CREATED).body(token);    }    @GetMapping("/logout/{token}")    public ResponseEntity<CustomerDto> logout(@PathVariable String token) {        ClientSession session = ClientSession.getSession(token);        if(session!=null ) {            ClientSession.invalidateSession(token);        }        return ResponseEntity.status(HttpStatus.OK).build();    }    @PostMapping("/signup")    public ResponseEntity<String> signup(@RequestBody Login login) {        String token = customerService.signup(login);        return ResponseEntity.status(HttpStatus.CREATED).body(token);    }    @GetMapping("/details/{token}")    public ResponseEntity<CustomerDto> getDetails(@PathVariable String token) {        ClientSession session = ClientSession.getSession(token);        if(session==null || session.isAuthorizedAccess()) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();        }        CustomerDto customerDto = customerService.getDetails(session.getUserId());        return ResponseEntity.status(HttpStatus.OK).body(customerDto);    }    @PutMapping("/edit/{token}")    public ResponseEntity<CustomerDto> updateDetails(@PathVariable String token, @RequestBody CustomerDto customerDto) {        ClientSession session = ClientSession.getSession(token);        if(session==null || session.isAuthorizedAccess()) {            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();        }        CustomerDto customer = customerService.editDetails(customerDto);        return ResponseEntity.status(HttpStatus.OK).body(customerDto);    }}