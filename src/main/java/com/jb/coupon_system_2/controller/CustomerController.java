package com.jb.coupon_system_2.controller;import com.jb.coupon_system_2.data.dto.CouponDto;import com.jb.coupon_system_2.data.dto.Login;import com.jb.coupon_system_2.service.CustomerService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.List;@RestController@RequestMapping("/api/customer")public class CustomerController {    private final CustomerService customerService;    @Autowired    public CustomerController(CustomerService customerService) {        this.customerService = customerService;    }    @GetMapping("/findBoughtCoupons/{customerId}")    public ResponseEntity<List<CouponDto>> findBoughtCoupons(            @PathVariable long customerId) {        List<CouponDto> boughtCoupons = customerService.findAllCouponsPurchased(customerId);        return ResponseEntity.ok(boughtCoupons);    }    @GetMapping("/findNotBoughtCoupons/{customerId}")    public ResponseEntity<List<CouponDto>> findNotBoughtCoupons(            @PathVariable long customerId) {        List<CouponDto> notBoughtCoupons = customerService.findAllCouponsUnpurchased(customerId);        return ResponseEntity.ok(notBoughtCoupons);    }    @PostMapping("/buyCoupon/{couponId}")    public ResponseEntity<CouponDto> buyCoupon(            @PathVariable long couponId) {        CouponDto boughtCoupon = customerService.purchaseCoupon(couponId);        return ResponseEntity.status(HttpStatus.CREATED).body(boughtCoupon);    }    @GetMapping("/findExpiringCoupons/{customerId}")    public ResponseEntity<List<CouponDto>> findExpiringCoupons(            @PathVariable long customerId) {        List<CouponDto> expiringCoupons = customerService.findPurchasedCouponsExpiringInDays(                customerId);        return ResponseEntity.ok(expiringCoupons);    }    @PostMapping("/login")    public ResponseEntity<String> login(            @RequestBody Login login) {        String token = customerService.login(login);        return ResponseEntity.status(HttpStatus.CREATED).body(token);    }}