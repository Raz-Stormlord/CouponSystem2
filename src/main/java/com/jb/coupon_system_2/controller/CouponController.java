package com.jb.coupon_system_2.controller;import com.jb.coupon_system_2.data.dto.CouponDto;import com.jb.coupon_system_2.data.entity.Coupon;import com.jb.coupon_system_2.mapper.CouponMapper;import com.jb.coupon_system_2.repository.CouponRepository;import org.springframework.http.HttpHeaders;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestHeader;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.util.UriComponentsBuilder;import java.net.URI;import java.util.Optional;@RestController@RequestMapping("/your-coupon-endpoint")public class CouponController {    private final CouponRepository couponRepository;    private final CouponMapper couponMapper;    public CouponController(CouponRepository couponRepository, CouponMapper couponMapper) {        this.couponRepository = couponRepository;        this.couponMapper = couponMapper;    }    @PostMapping("/create")    public ResponseEntity<CouponDto> createCoupon(            @RequestBody CouponDto couponDto,            @RequestHeader("Authorization") String authorizationHeader,            UriComponentsBuilder uriComponentsBuilder    ) {        String name = couponDto.getName();        Optional<Coupon> existingCoupon = couponRepository.findCouponByName(name);        if (existingCoupon.isPresent()) {            throw new ControllerAdvice.CouponAlreadyExistsException("Error 400 - coupon already exists");        }        Coupon newCoupon = couponMapper.toEntity(couponDto);        Coupon savedCoupon = couponRepository.save(newCoupon);        CouponDto savedCouponDto = couponMapper.toDto(savedCoupon);        String couponUri = uriComponentsBuilder.path("/your-coupon-endpoint/{id}")                .buildAndExpand(savedCoupon.getId())                .toUriString();        HttpHeaders headers = new HttpHeaders();        headers.setLocation(URI.create(couponUri));        return new ResponseEntity<>(savedCouponDto, headers, HttpStatus.CREATED);    }}